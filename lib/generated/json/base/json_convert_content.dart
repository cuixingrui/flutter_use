// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_use/bean/test/test_test_bean.dart';
import 'package:flutter_use/generated/json/test_test_bean_helper.dart';
import 'package:flutter_use/bean/test/net_list_bean.dart';
import 'package:flutter_use/generated/json/net_list_bean_helper.dart';
import 'package:flutter_use/bean/test/net_object_bean.dart';
import 'package:flutter_use/generated/json/net_object_bean_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case TestTestBean:
				return testTestBeanFromJson(data as TestTestBean, json) as T;
			case TestTestData:
				return testTestDataFromJson(data as TestTestData, json) as T;
			case NetListBean:
				return netListBeanFromJson(data as NetListBean, json) as T;
			case NetObjectBean:
				return netObjectBeanFromJson(data as NetObjectBean, json) as T;
			case NetObjectDatas:
				return netObjectDatasFromJson(data as NetObjectDatas, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TestTestBean:
				return testTestBeanToJson(data as TestTestBean);
			case TestTestData:
				return testTestDataToJson(data as TestTestData);
			case NetListBean:
				return netListBeanToJson(data as NetListBean);
			case NetObjectBean:
				return netObjectBeanToJson(data as NetObjectBean);
			case NetObjectDatas:
				return netObjectDatasToJson(data as NetObjectDatas);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TestTestBean).toString()){
			return TestTestBean().fromJson(json);
		}	else if(type == (TestTestData).toString()){
			return TestTestData().fromJson(json);
		}	else if(type == (NetListBean).toString()){
			return NetListBean().fromJson(json);
		}	else if(type == (NetObjectBean).toString()){
			return NetObjectBean().fromJson(json);
		}	else if(type == (NetObjectDatas).toString()){
			return NetObjectDatas().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TestTestBean>[] is M){
			return data.map<TestTestBean>((e) => TestTestBean().fromJson(e)).toList() as M;
		}	else if(<TestTestData>[] is M){
			return data.map<TestTestData>((e) => TestTestData().fromJson(e)).toList() as M;
		}	else if(<NetListBean>[] is M){
			return data.map<NetListBean>((e) => NetListBean().fromJson(e)).toList() as M;
		}	else if(<NetObjectBean>[] is M){
			return data.map<NetObjectBean>((e) => NetObjectBean().fromJson(e)).toList() as M;
		}	else if(<NetObjectDatas>[] is M){
			return data.map<NetObjectDatas>((e) => NetObjectDatas().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}